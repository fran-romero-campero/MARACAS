#! /bin/bash

## Authors: Francisco J. Romero-Campero
##          Ana Belen Romero-Losada
## Contact: Francisco J. Romero-Campero - fran@us.es

## Load parameters from file

## Input file name
PARAMS=$1

echo ""
echo "                     .=====.                             "
echo "                    /  9  9 \                            "
echo "                   (         )                           "
echo "                    \  \__/ /                            "
echo "                     \_____/                             "
echo " _____________OOOO_____|_|___________________________    "
echo "/                                                    \   "
echo "|             WELCOME TO OUR TOOL                    |   "
echo "| MARACAS (MicroAlgae RnA-seq and Chip-seq AnalysiS) |   "
echo "|     This is the ChIP-seq Data Analysis Pipeline    |   "
echo "|    Specifically Design to Support the Microalgae   |   "
echo "|      Resarch Community to Exploit Omics Data       |   "
echo "|                                                    |   "
echo "|        Ubuntu means I am because we are            |   "
echo "|           Nelson Mandela (1918 - 2013)             |   "     
echo "\_______________________________OOOO_________________/   "
echo "                     |  |  |                             "
echo "                     |__|__|                             "
echo "                     |  |  |                             "
echo "                     |  |  |                             "
echo "                     |__|__|                             "
echo "                     /  X  \                             "
echo "                    (__/ \__)                            "
echo ""
echo ""

sleep 10s

echo "                                                          "
if [ $# -ne 1 ];
then
   echo "Error: Wrong number of parameters."
   echo ""
   echo ""
   echo "Usage: chipseq_pipeline <param_file>"
   echo ""
   echo "param_file: A file specifying the parameters for the ChIP-seq "
   echo "             Data Analysis Pipeline. The folder test contains "
   echo "             several examples such as chip_test_params.txt. Check "
   echo "             the README file for details on how to write the "
   echo "             paramater file."

   exit
fi

echo ""
echo "------------------------------------------------------"
echo "------------------------------------------------------"
echo "|| STEP 1: LOADING PARAMETERS FROM FILE " $PARAMS "   "
echo "------------------------------------------------------"
echo "------------------------------------------------------" 
echo ""

## Load installation directory
##INS_DIR=$(grep installation_directory: $PARAMS | awk '{ print $2 }')

## Load data source
DATA=$(grep data_source: $PARAMS | awk '{print $2}')

## Load working directory
WD=$(grep working_directory: $PARAMS | awk '{ print $2 }')

## Load main folder
MAIN_FOLDER=$(grep main_folder: $PARAMS | awk '{ print $2 }')

## Load number of replicates
NUM_REPLICATES=$(grep number_of_replicates: $PARAMS | awk '{ print $2 }')

## Load sample name 
SAMPLE_NAME=$(grep sample_name: $PARAMS | awk '{ print $2 }')

## Load microalgae
MICROALGAE=$(grep microalgae: $PARAMS | awk '{ print $2 }')

## Load control is part of the design
INCLUDED_CONTROL=$(grep included_control: $PARAMS | awk '{ print $2 }')

## Load paired end data
PAIRED=$(grep paired_end: $PARAMS | awk '{print $2}')

## Load accession numbers for each sample o file location depending on data source
if [ $DATA == "DB" ]
then

   CHIP_SAMPLES=()
   for i in `seq 0 $((${NUM_REPLICATES} - 1))`
   do
      CHIP_SAMPLES[$i]=$(grep chip_replicate_$(($i +1)): $PARAMS | awk '{ print $2 }')
   done

   if [ ${INCLUDED_CONTROL} == "yes" ]
   then
      CONTROL_SAMPLES=()
      for i in `seq 0 $((${NUM_REPLICATES} - 1))`
      do
         CONTROL_SAMPLES[$i]=$(grep control_replicate_$(($i +1)): $PARAMS | awk '{ print $2 }')
      done
   fi

elif [ $DATA == "FILES" ] && [ $PAIRED == "FALSE" ]
then
   LOC_CHIP_SAMPLES=()
   for i in `seq 0 $((${NUM_REPLICATES} - 1))`
   do
      LOC_CHIP_SAMPLES[$i]=$(grep loc_chip_replicate_$(($i +1)): $PARAMS | awk '{ print $2 }')
      ACC_SAMPLES[$i]=sample$(($i+1))
   done
   
   if [ ${INCLUDED_CONTROL} == "yes" ]
   then
      LOC_CONTROL_SAMPLES=()
      for i in `seq 0 $((${NUM_REPLICATES} - 1))`
      do
         LOC_CONTROL_SAMPLES[$i]=$(grep loc_control_replicate_$(($i +1)): $PARAMS | awk '{ print $2 }')
      done
   fi

elif [ $DATA == "FILES" ] && [ $PAIRED == "TRUE" ]
then
   LOC_CHIP_SAMPLES_LEFT=()
   LOC_CHIP_SAMPLES_RIGHT=()
   for i in `seq 0 $((${NUM_REPLICATES} - 1))`
   do
      LOC_CHIP_SAMPLES_LEFT[$i]=$(grep loc_chip_replicate_left_$(($i +1)): $PARAMS | awk '{ print $2 }')
      LOC_CHIP_SAMPLES_RIGHT[$i]=$(grep loc_chip_replicate_right_$(($i +1)): $PARAMS | awk '{ print $2 }')
      ACC_SAMPLES[$i]=sample$(($i+1))
   done

   if [ ${INCLUDED_CONTROL} == "yes" ]
   then
      LOC_CONTROL_SAMPLES_LEFT=()
      LOC_CONTROL_SAMPLES_RIGHT=()
      for i in `seq 0 $((${NUM_REPLICATES} - 1))`
      do
         LOC_CONTROL_SAMPLES_LEFT[$i]=$(grep loc_control_replicate_left_$(($i +1)): $PARAMS | awk '{ print $2 }')
         LOC_CONTROL_SAMPLES_RIGHT[$i]=$(grep loc_control_replicate_right_$(($i +1)): $PARAMS | awk '{ print $2 }')
      done
   fi

fi

## Load parameter to indicate if the pipeline is going to be run on a cluster >
ARCH=$(grep cluster: $PARAMS | awk '{ print $2}')

## Load parameter with the number of processors
NPROC=$(grep number_processors: $PARAMS | awk '{ print $2}')

## Load parameter to indicate if the ChIPseq data has been generated for an
## histone modification or transcription factor

MODE=$(grep mode: $PARAMS | awk '{ print $2 }')

## Load parameter with histone modification or transcription factor name
if [ $MODE == "histone_modification" ]
then
   HISTONE=$(grep histone_modification: $PARAMS | awk '{ print $2 }')
   TF=NULL
elif [ $MODE == "transcription_factor" ]
then
   HISTONE=NULL
   TF=$(grep transcription_factor: $PARAMS | awk '{ print $2 }')
else
   echo "Incorrect value for MODE " $MODE
   echo "Only histone_modification or transcription_factor"
   exit
fi

echo ""
echo "---------------------------------------------------"
echo "The following parameters were loaded."
##echo " - Installation directory: " $INS_DIR
echo " - Working directory: " $WD
echo " - Main folder: " $MAIN_FOLDER
echo " - Number of replicates: " $NUM_REPLICATES
echo " - Sample name: " ${SAMPLE_NAME}
echo " - Microalgae: " $MICROALGAE
echo " - Control Input/mock: " ${INCLUDED_CONTROL}
echo " - Architecture where script will be run: " $ARCH
echo " - Number of processors: " $NPROC
echo " - ChIP-seq data for a " $MODE 
echo " - Histone modification or Transcription factor: " 

if [ $MODE == "histone_modification" ]
then
   echo "      " $HISTONE
elif [ $MODE == "transcription_factor" ]
then
   echo "      " $TF
fi

echo " - Samples loaded: "
if [ $DATA == "DB" ]
then
        echo "      Sample accession numbers: " ${CHIP_SAMPLES[@]} ${CONTROL_SAMPLES[@]}
else
        echo "      Sample locations: " ${LOC_SAMPLES[@]}
fi

echo "---------------------------------------------------"
echo ""


## Generate working directory structure

echo ""
echo "------------------------------------------------------------"
echo "------------------------------------------------------------"
echo "|| STEP 2: GENERATION OF THE WORKING DIRECTORY ESTRUCTURE ||"
echo "------------------------------------------------------------"
echo "------------------------------------------------------------"
echo ""

## Access working directory
cd $WD

## Create and access main folder
mkdir ${MAIN_FOLDER}
cd ${MAIN_FOLDER}

## Create subfolders
mkdir replicates results logs

## Create folder for each sample
cd replicates

for i in `seq 1 ${NUM_REPLICATES}`
do
   mkdir replicate_$i
done

echo ""
echo "* Working Directory Structure Generated!"
echo ""

## Parallel sample processing
if [ $ARCH == "SLURM" ]
then
   echo ""
   echo "----------------------------------------------------"
   echo "----------------------------------------------------"
   echo "|| STEP 3: PARALLEL SAMPLE PROCESSING USING SLURM ||"
   echo "----------------------------------------------------"
   echo "----------------------------------------------------"
   echo ""

   for  i in `seq 0 $((${NUM_REPLICATES} - 1))`
   do
      echo ""
      echo "*************************"
      echo "* Processing Sample " $(($i + 1)) 
      echo "*************************"
      echo ""

      cd $WD/${MAIN_FOLDER}/replicates/replicate_$(($i + 1))

      if [ $DATA == "DB" ] && [ ${INCLUDED_CONTROL} == "yes" ]
      then
         sbatch $MARACAS/scripts/chipseq_replicate_processing.sh $DATA $PAIRED \
                                         $WD ${MAIN_FOLDER} \
                                         $MARACAS/data/${MICROALGAE}/genome/bowtie2_index_${MICROALGAE} \
                                         ${NUM_REPLICATES} \
                                         ${INCLUDED_CONTROL} \
                                         ${CHIP_SAMPLES[$i]} \
                                         NULL \
                                         ${CONTROL_SAMPLES[$i]} \
                                         NULL \
                                         $(($i +1)) \
                                         $MODE \
                                         $NPROC \
                                         $ARCH \
                                         $MICROALGAE \
                                         $HISTONE \
                                         $TF
     elif [ $DATA == "FILES" ] && [ $PAIRED == "FALSE" ]
     then
         sbatch $MARACAS/scripts/chipseq_replicate_processing.sh $DATA $PAIRED \
                                         $WD ${MAIN_FOLDER} \
                                         $MARACAS/data/${MICROALGAE}/genome/bowtie2_index_${MICROALGAE} \
                                         ${NUM_REPLICATES} \
                                         ${INCLUDED_CONTROL} \
                                         ${LOC_CHIP_SAMPLES[$i]} \
                                         NULL \
                                         ${LOC_CONTROL_SAMPLES[$i]} \
                                         NULL \
                                         $(($i +1)) \
                                         $MODE \
                                         $NPROC \
                                         $ARCH \
                                         $MICROALGAE \
                                         $HISTONE \
                                         $TF
      elif [ $DATA == "FILES" ] && [ $PAIRED == "TRUE" ]
      then
          sbatch $MARACAS/scripts/sample_processing.sh $DATA $PAIRED \
                                         $WD ${MAIN_FOLDER} \
                                         $MARACAS/data/${MICROALGAE}/genome/hisat2_index_${MICROALGAE} \
                                         $MARACAS/data/${MICROALGAE}/annotation/${MICROALGAE}.gtf \
                                         ${NUM_SAMPLES} \
                                         $WD/${MAIN_FOLDER} \
                                         ${CONTROL_COND} \
                                         ${EXPERIMENTAL_COND} \
                                         ${FOLD_CHANGE} \
                                         ${Q_VALUE} \
                                         ${LOC_SAMPLES_LEFT[$i]} \
                                         ${LOC_SAMPLES_RIGHT[$i]} \
                                         $MODE \
                                         $NPROC \
                                         $ARCH \
                                         $MICROALGAE \
                                         $HISTONE \
                                         $TF
      fi
      echo ""
      echo "**************************************************"
      echo "* Sample " $(($i + 1)) " submitted to the queue! *" 
      echo "**************************************************"
      echo ""
   done

elif [ $ARCH == "SGE" ]
then
   echo ""
   echo "--------------------------------------------------"
   echo "--------------------------------------------------"
   echo "|| STEP 3: PARALLEL SAMPLE PROCESSING USING SGE ||"
   echo "--------------------------------------------------"
   echo "--------------------------------------------------"
   echo ""

   for  i in `seq 0 $((${NUM_REPLICATES} - 1))`
   do
      if [ $DATA == "DB" ] && [ ${INCLUDED_CONTROL} == "yes" ]
      then
         if [ $PAIRED == "FALSE" ]
         then
         qsub -o $WD/${MAIN_FOLDER}/logs/${CHIP_SAMPLES[$i]} $MARACAS/scripts/chipseq_replicate_processing.sh $DATA $PAIRED \
                                         $WD ${MAIN_FOLDER} \
                                         $MARACAS/data/${MICROALGAE}/genome/bowtie2_index_${MICROALGAE} \
                                         ${NUM_REPLICATES} \
                                         ${INCLUDED_CONTROL} \
                                         ${CHIP_SAMPLES[$i]} \
                                         NULL \
                                         ${CONTROL_SAMPLES[$i]} \
                                         NULL \
                                         $(($i +1))
#         else
         fi
      elif [ $DATA == "FILES" ] && [ $PAIRED == "FALSE" ]
      then
         qsub -o $WD/${MAIN_FOLDER}/logs/${ACC_SAMPLES[$i]} $MARACAS/scripts/sample_processing.sh $DATA $PAIRED \
                                         $WD ${MAIN_FOLDER} \
                                         $MARACAS/data/${MICROALGAE}/genome/hisat2_index_${MICROALGAE} \
                                         $MARACAS/data/${MICROALGAE}/annotation/${MICROALGAE}.gtf \
                                         ${NUM_SAMPLES} \
                                         $WD/${MAIN_FOLDER} \
                                         ${CONTROL_COND} \
                                         ${EXPERIMENTAL_COND} \
                                         ${FOLD_CHANGE} \
                                         ${Q_VALUE} \
                                         ${LOC_SAMPLES[$i]}
      elif [ $DATA == "FILES" ] && [ $PAIRED == "TRUE" ]
      then
                qsub -o $WD/${MAIN_FOLDER}/logs/${ACC_SAMPLES[$i]} $MARACAS/scripts/sample_processing.sh $DATA $PAIRED \
                                                $WD ${MAIN_FOLDER} \
                                                $MARACAS/data/${MICROALGAE}/genome/hisat2_index_${MICROALGAE} \
                                                $MARACAS/data/${MICROALGAE}/annotation/${MICROALGAE}.gtf \
                                                ${NUM_SAMPLES} \
                                                $WD/${MAIN_FOLDER} \
                                                ${CONTROL_COND} \
                                                ${EXPERIMENTAL_COND} \
                                                ${FOLD_CHANGE} \
                                                ${Q_VALUE} \
                                                ${LOC_SAMPLES_LEFT[$i]} \
                                                ${LOC_SAMPLES_RIGHT[$i]}
      fi

      echo "- Replicate " $(($i + 1)) " processing submitted to queue"
      sleep 30m
   done

elif [ $ARCH == "SERVER" ]
then

   echo ""
   echo "------------------------------------------"
   echo "------------------------------------------"
   echo "|| STEP 3: SEQUENTIAL SAMPLE PROCESSING ||"
   echo "------------------------------------------"
   echo "------------------------------------------"
   echo ""

   for  i in `seq 0 $((${NUM_REPLICATES} - 1))`
   do
      echo ""
      echo "*************************"
      echo "* Processing Sample " $(($i + 1)) 
      echo "*************************"
      echo ""

      if [ $DATA == "DB" ] && [ ${INCLUDED_CONTROL} == "yes" ]
      then
         bash $MARACAS/scripts/chipseq_replicate_processing.sh $DATA $PAIRED \
                                         $WD ${MAIN_FOLDER} \
                                         $MARACAS/data/${MICROALGAE}/genome/bowtie2_index_${MICROALGAE} \
                                         ${NUM_REPLICATES} \
                                         ${INCLUDED_CONTROL} \
                                         ${CHIP_SAMPLES[$i]} \
                                         NULL \
                                         ${CONTROL_SAMPLES[$i]} \
                                         NULL \
                                         $(($i +1)) \
                                         $MODE \
                                         $NPROC\
                                         $ARCH
     elif [ $DATA == "FILES" ] && [ $PAIRED == "FALSE" ]
     then
         bash $MARACAS/scripts/chipseq_replicate_processing.sh $DATA $PAIRED \
                                         $WD ${MAIN_FOLDER} \
                                         $MARACAS/data/${MICROALGAE}/genome/bowtie2_index_${MICROALGAE} \
                                         ${NUM_REPLICATES} \
                                         ${INCLUDED_CONTROL} \
                                         ${LOC_CHIP_SAMPLES[$i]} \
                                         NULL \
                                         ${LOC_CONTROL_SAMPLES[$i]} \
                                         NULL \
                                         $(($i +1)) \
                                         $MODE \
                                         $NPROC \
                                         $ARCH
      elif [ $DATA == "FILES" ] && [ $PAIRED == "TRUE" ]
      then
          bash $MARACAS/scripts/sample_processing.sh $DATA $PAIRED \
                                         $WD ${MAIN_FOLDER} \
                                         $MARACAS/data/${MICROALGAE}/genome/hisat2_index_${MICROALGAE} \
                                         $MARACAS/data/${MICROALGAE}/annotation/${MICROALGAE}.gtf \
                                         ${NUM_SAMPLES} \
                                         $WD/${MAIN_FOLDER} \
                                         ${CONTROL_COND} \
                                         ${EXPERIMENTAL_COND} \
                                         ${FOLD_CHANGE} \
                                         ${Q_VALUE} \
                                         ${LOC_SAMPLES_LEFT[$i]} \
                                         ${LOC_SAMPLES_RIGHT[$i]} \
                                         $MODE \
                                         $NPROC \
                                         $ARCH
      fi

      echo ""
      echo "*************************************"
      echo "* Sample " $(($i + 1)) " Processed! *" 
      echo "*************************************"
      echo ""
   done

   echo ""
   echo "***********************************"
   echo "* ALL SAMPLES HAS BEEN PROCESSED! *"
   echo "***********************************"
   echo ""

   echo "------------------------"
echo "antes"
echo "WD=" $WD
echo "MAIN_FOLDER=" ${MAIN_FOLDER}
echo "NUM_REPLICATES=" ${NUM_REPLICATES}
echo "MODE=" $MODE
##echo "INS_DIR=" ${INS_DIR}
echo "MICRO=" $MICROALGAE
echo "HISTONE=" $HISTONE
echo "TF=" $TF
echo "INCLUDED_CONTROL=" ${INCLUDED_CONTROL}
echo "NPROC=" $NPROC
echo "----------------------"



   if [ $MODE == "histone_modification" ]
   then
      bash $MARACAS/scripts/chipseq_final_processing.sh $WD ${MAIN_FOLDER} ${NUM_REPLICATES} \
                                                       $MODE $MICROALGAE $HISTONE $HISTONE \
                                                       ${INCLUDED_CONTROL} $NPROC
   elif [ $MODE == "transcription_factor" ]
   then
      bash $MARACAS/scripts/chipseq_final_processing.sh $WD ${MAIN_FOLDER} ${NUM_REPLICATES} \
                                                       $MODE $MICROALGAE $TF $TF \
                                                       ${INCLUDED_CONTROL} $NPROC
   fi
fi



#if [ ${NUM_REPLICATES} -gt 1 ]
#then
#   cd ../results
#   cp ../replicates/replicate_1/replicate_1_peaks.narrowPeak acum_peaks.narrowPeak
#   bigwigCompare -b1 ../replicates/replicate_1/chip_1.bw -b2 ../replicates/replicate_2/chip_2.bw \
#                 --scaleFactors 1:1 --operation add \
#                 --binSize 5 --outFileName sum_chip.bw \
#                 --outFileFormat bigwig 
#   for  i in `seq 3 ${NUM_REPLICATES}`
#   do
#      intersectBed -a acum_peaks.narrowPeak -b ../replicates/replicate_$i/replicate_${i}_peaks.narrowPeak > acum_peaks_2.narrowPeak
#      rm acum_peaks.narrowPeak
#      mv acum_peaks_2.narrowPeak acum_peaks.narrowPeak
#
#      cp sum_chip.bw cp_sum_chip.bw
#      rm sum_chip.bw
#      bigwigCompare -b1 ../replicates/replicate_$i/chip_$i.bw -b2 cp_sum_chip.bw \
#                    --scaleFactors 1:1 --operation add \
#                    --binSize 5 --outFileName sum_chip.bw \
#                    --outFileFormat bigwig
#      rm cp_sum_chip.bw 
#
#   done
#   mv acum_peaks.narrowPeak output_peaks.narrowPeak
#
   ## Add bc dependency
#   SCALEFACTOR=$(echo "1/(2*${NUM_REPLICATES})" | bc -l)
#   bigwigCompare -b1 sum_chip.bw -b2 sum_chip.bw \
#                 --scaleFactors $SCALEFACTOR:$SCALEFACTOR --operation add \
#                 --binSize 5 --outFileName chip_average.bw \
#                 --outFileFormat bigwig 
#else
#   cp replicate_${CURRENT_REPLICATE}_peaks.narrowPeak ../../results/output_peaks.narrowPeak
#fi

#if [ $MODE == "histone_modification" ]
#then
#   Rscript ${INS_DIR}/scripts/create_Rmd.R $WD/${MAIN_FOLDER}/results/ChIP_seq_analysis_report.Rmd $MICROALGAE $MODE $HISTONE ${NUM_REPLICATES} ${INCLUDED_CONTROL}
#elif [ $MODE == "transcription_factor" ]
#then
#   Rscript ${INS_DIR}/scripts/create_Rmd.R $WD/${MAIN_FOLDER}/results/ChIP_seq_analysis_report.Rmd $MICROALGAE $MODE $TF ${NUM_REPLICATES} ${INCLUDED_CONTROL}
#fi

# Add rmarkdown dependency
# Add pandoc dependency
# Add sudo apt-get install texlive-latex-base
#Rscript -e "rmarkdown::render('ChIP_seq_analysis_report.Rmd', 'pdf_document')" 
#Rscript -e "rmarkdown::render('ChIP_seq_analysis_report.Rmd', 'html_document')"
