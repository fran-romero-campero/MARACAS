#! /bin/bash

## Authors: Francisco J. Romero-Campero
##          Ana Belen Romero-Losada
##          Pedro de los Reyes

## Maintainer: Francisco J. Romero-Campero <fran@us.es>
## Contact: Francisco J. Romero-Campero <fran@us.es>

## Check number of input parameters and display help message
if [ $# -ne 1 ]
  then
    echo "Wrong number of input arguments supplied."
    echo ""
    echo "Usage: trance <parameter_file>"
    echo ""
    echo "The parameter file must be a plain text similar"
    echo "to the following example:"
    echo ""

    exit 1
fi

## Name first argument
PARAMS=$1

## Read in parameters
echo "-------------------------------------------------------------------"
echo "Reading parameter file ..."

## Instalation directory
INS=$(grep instalation_directory: $PARAMS | awk '{ print $2 }')

## Working directory 
WD=$(grep working_directory: $PARAMS | awk '{ print $2 }')

## Load main folder
MAIN_FOLDER=$(grep main_folder: $PARAMS | awk '{ print $2 }')

## Load microalgae
MICROALGAE=$(grep microalgae: $PARAMS | awk '{ print $2 }')

ALL_LOCAL=$(grep all_local: $PARAMS | awk '{ print $2 }')

declare -A SAMPLES_ACC

SAMPLE_NAME=$(grep sample_name: $PARAMS | awk '{print $2}')
NUMBER_REPLICATES=$(grep number_replicates: $PARAMS | awk '{print $2}')
INCLUDED_CONTROL=$(grep included_control: $PARAMS | awk '{ print $2 }')

for j in `seq 0 $((${NUMBER_REPLICATES[$i]} -1))` 
do
   SAMPLES_ACC[chip_replicate_$(($j + 1))]+=$(grep chip_replicate_$(($j + 1)): $PARAMS | awk '{ print $2 }')
   if [ ${INCLUDED_CONTROL[$i]} == "yes" ]
      then
         SAMPLES_ACC[control_replicate_$(($j + 1))]+=$(grep control_replicate_$(($j + 1)): $PARAMS | awk '{ print $2 }')
      else
         SAMPLES_ACC[control_replicate_$(($j + 1))]+=NA
   fi
done

echo ""
echo "Read parameters:"
echo "instalation_directory: " $INS
echo "working directory: " $WD
echo "all_local: " $ALL_LOCAL
echo "microalgae: " $MICROALGAE
echo "Sample name " ${NAME_TFS}
echo "Number replicates " ${NUMBER_REPLICATES}

for j in `seq 0 $((${NUMBER_REPLICATES} -1))`
do
   echo chip_replicate_$(($j + 1)) = ${SAMPLES_ACC[chip_replicate_$(($j + 1))]}
   echo control_replicate_$(($j + 1)) = ${SAMPLES_ACC[control_replicate_$(($j + 1))]}
done



echo ""
echo "Done reading parameter file."
echo "-------------------------------------------------------------------"
echo ""

## Generate working directory structure

echo ""
echo "-------------------------------------------------------------------"
echo "Generating working directory structure"

if [ -d $WD ]
then
    echo "Working directory " $WD " already exists."
    echo "Do you want to delete it and create a new empty directory? (Yes | No)"
    read ANS

    if [ $ANS == "Yes" ] || [ $ANS == "YES" ] || [ $ANS == "yes" ] || [ $ANS == "Y" ] || [ $ANS == "y" ] 
    then
        rm -r $WD
        mkdir $WD
    elif [ $ANS == "No" ] || [ $ANS == "NO" ] || [ $ANS == "no" ] || [ $ANS == "N" ] || [ $ANS == "n" ]
    then
         echo "Please delete de directory " $WD " manually or specify a diferent working directory in the parameter file " $PARAMS
         exit 1
    else
         echo "Wrong answer. Please re-run trance and please answer Yes or No to the previous question."
         exit 1
    fi
else
    mkdir $WD
fi

cd $WD
mkdir genome annotation results samples logs

## Copy genome and create index
if [ ! -f $GENOME_LOC ] 
then
    echo "Genome file " $GENOME_LOC " does NOT exists. Please check it and re-run trance."
    exit 1
fi

cd genome
cp $GENOME_LOC genome.fa.gz
gunzip genome.fa.gz
bowtie-build genome.fa index

## Copy annotation file
if [ ! -f $ANNOTATION_LOC ]
then
    echo "Annotation file " $ANNOTATION_LOC " does NOT exists. Please check it and re-run trance"
    exit 1
fi

cd ../annotation/
cp $ANNOTATION_LOC annotation.gff3

## Generate samples folder
cd ../samples

for i in `seq 0 $(($NUMBER_TFS - 1))`
do
    mkdir ${NAME_TFS[$i]}
    cd ${NAME_TFS[$i]}

    for j in `seq 0 $((${NUMBER_REPLICATES[$i]} -1))`
    do
        mkdir chip_replicate_$(($j + 1))
        mkdir control_replicate_$(($j + 1))
        cd .. 
    done
done

echo "Done generating working directory structure."
echo ""
echo "-------------------------------------------------------------------"

## Access logs folder
cd ../logs

## Submit processing for each transcrition factor replicate
for i in `seq 0 $(($NUMBER_TFS - 1))`
do
    for j in `seq 0 $((${NUMBER_REPLICATES[$i]} -1))`
    do
        sbatch --job-name ${NAME_TFS[$i]}_replicate_$(($j + 1)) --output ${NAME_TFS[$i]}_replicate_$(($j + 1)) $INS/read_mapping.sh $INS $WD ${NAME_TFS[$i]} $(($j + 1)) ${SAMPLES_ACC[chip_replicate_$(($j + 1))_TF_$(($i + 1))]} chip ${NUMBER_REPLICATES[$i]}
        if [ ${SAMPLES_ACC[control_replicate_$(($j + 1))_TF_$(($i + 1))]} == NA ]
        then
            echo control_replicate_$(($j + 1))_${NAME_TFS[$i]} DONE >> blackboard_replicate_$(($j + 1))_${NAME_TFS[$i]}        
        else
            sbatch --job-name ${NAME_TFS[$i]}_replicate_$(($j + 1)) --output ${NAME_TFS[$i]}_replicate_$(($j + 1)) $INS/read_mapping.sh $INS $WD ${NAME_TFS[$i]} $(($j + 1)) ${SAMPLES_ACC[control_replicate_$(($j + 1))_TF_$(($i + 1))]} control ${NUMBER_REPLICATES[$i]}
        fi
    done
done

